{
  "hash": "0b1dc455c59114cb9e7d19aabd655da8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Happy Chinese New Year 2025 🎉🧧\"\ndescription: \"_Weisi reflects on the sight of red lanterns strung along the streetlights on her way to Hangzhou Xiaoshan International Airport_\"\nauthor:\n  - name: Weisi Chen\ndate: 2025-02-17\ncategories: [Health Data Science, Data Visualisation, R] # self-defined categories\nfreeze: true\nimage: lantern.jpg\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n---\n\n\n\n<div style=\"display:grid; grid-template-columns: 1fr 1fr;\">\n\n<div>\n\n::: author-meta-content\n{{< fa envelope title=\"An envelope\" >}} <a href=\"mailto:weisi.0816@gmail.com\">weisi.0816@gmail.com</a>\n:::\n\n::: author-meta-content\n{{< fa brands linkedin title=\"LinkedIn logo\" >}} <a href=\"https://www.linkedin.com/in/weisi-chen-000334239/\">linkedin.com/in/weisi-chen-000334239</a>\n:::\n\n\n</div>\n\n\n</div>\n\n::: aside \n\n::: {.oval-border}\n![](weisi.jpg)\n:::\n\nWeisi completed the Master of Health Data Science in 2023 and has since been working as a data scientists at the School of Population Health, UNSW. \n\n:::\n\n\n\n\n\n\n\n\nOn my way to Hangzhou Xiaoshan International Airport for my return to Sydney, the streets were beautifully adorned with red lanterns 🏮 hanging from the streetlights. Inspired by this enchanting sight, I created the figure below in R during the trip (with help from ChatGPT—and a lot of iterations 😁). It definitely helped pass the time while I was waiting (endlessly) at the airport and enduring nearly 10 hours on the plane!!!\n \nWishing everyone a Happy Chinese New Year of the Snake 🐍 2025!🧨🎇🎉🧧\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=1440}\n:::\n:::\n\n\n\n#### Source code for creating the above figure:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tibble)\n```\n:::\n\n\n\n### Step 1: Create a red lantern by coding all the components that make up the lantern.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlantern_body <- tibble(\n  x = cos(seq(0, 2 * pi, length.out = 100)),\n  y = sin(seq(0, 2 * pi, length.out = 100)) * 0.6 # Oval shape\n)\n\n# Decorative gold band at the top and bottom\ngold_band_top <- tibble(\n  x = c(-0.8, 0.8, 0.8, -0.8),\n  y = c(0.6, 0.6, 0.5, 0.5)\n)\n\ngold_band_bottom <- tibble(\n  x = c(-0.8, 0.8, 0.8, -0.8),\n  y = c(-0.5, -0.5, -0.6, -0.6)\n)\n\n# Tassels at the bottom\ntassels <- tibble(\n  x = c(-0.5, -0.3, 0, 0.3, 0.5),\n  xend = c(-0.5, -0.3, 0, 0.3, 0.5),\n  y = rep(-0.6, 5),\n  yend = rep(-1.0, 5)\n)\n\n# Hanging string at the top\nhanging_string <- tibble(\n  x = c(0, 0),\n  y = c(0.6, 0.75)  # Longer hanging string for traditional look\n)\n\n# Chinese knot at the top\nchinese_knot <- tibble(\n  x = c(0, 0.1, -0.1, 0),\n  y = c(0.75, 0.85, 0.85, 0.75)\n)\n\n# Star-like lights (small golden stars on the lantern)\nstars <- tibble(\n  x = c(0.2, -0.5, 0.6, -0.4, 0.3),\n  y = c(0.5, 0.6, -0.4, -0.6, -0.7),\n  size = c(2, 1.5, 1.8, 1, 1.7)\n)\n\n# Additional decorative curved lines on the lantern body\ncurved_lines <- tibble(\n  x = c(0, 0.5, 1, 0.5, 0),\n  y = c(0.3, 0.5, 0.3, -0.5, -0.7)\n)\n\n# More golden dots along the body of the lantern\ndots <- tibble(\n  x = c(-0.3, 0.4, -0.4, 0.5, 0.2),\n  y = c(0.4, 0.5, -0.4, -0.5, -0.6)\n)\n\n# Adding vertical semi-circle curved lines\nsemi_circles_vertical <- tibble(\n  x = c(-0.6, -0.4, 0, 0.4, 0.7),  # X positions for vertical curves\n  y_start = rep(0.5, 5),  # Start at the top of the lantern\n  y_end = rep(-0.5, 5),  # End at the bottom of the lantern\n  curvature = c(-0.5, 0.5, -0.5, 0.5, -0.5)  # Same curvature for a semi-circle effect\n)\n```\n:::\n\n\n\n\n### Step 2: Create a function to arrange the positions (x and y) of multiple lanterns within a single figure.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_lantern_layers <- function(offset_x = 0, offset_y = 0) {\n  list(\n    # Lantern body\n    geom_polygon(\n      data = lantern_body %>% mutate(x = x + offset_x, y = y + offset_y),\n      aes(x = x, y = y),\n      fill = \"red\", color = \"darkred\", linewidth = 1.5\n    ),\n    # Gold band at the top\n    geom_polygon(\n      data = gold_band_top %>% mutate(x = x + offset_x, y = y + offset_y),\n      aes(x = x, y = y),\n      fill = \"gold\", color = \"goldenrod\", linewidth = 1.5\n    ),\n    # Gold band at the bottom\n    geom_polygon(\n      data = gold_band_bottom %>% mutate(x = x + offset_x, y = y + offset_y),\n      aes(x = x, y = y),\n      fill = \"gold\", color = \"goldenrod\", linewidth = 1.5\n    ),\n    # Tassels at the bottom\n    geom_segment(\n      data = tassels %>% mutate(x = x + offset_x, xend = xend + offset_x, y = y + offset_y, yend = yend + offset_y),\n      aes(x = x, y = y, xend = xend, yend = yend),\n      color = \"goldenrod\", linewidth = 1.5\n    ),\n    # Hanging string\n    geom_segment(\n      data = hanging_string %>% mutate(x = x + offset_x, y = y + offset_y),\n      aes(x = x, y = y, xend = x, yend = y + 0.2),\n      color = \"gold\", linewidth = 1.2\n    ),\n    # Chinese knot at the top\n    geom_polygon(\n      data = chinese_knot %>% mutate(x = x + offset_x, y = y + offset_y),\n      aes(x = x, y = y),\n      fill = \"gold\", color = \"goldenrod\", linewidth = 1.5\n    ),\n    # Tiny stars/lights around the lantern\n    geom_point(\n      data = stars %>% mutate(x = x + offset_x, y = y + offset_y),\n      aes(x = x, y = y, size = size),\n      color = \"gold\", alpha = 0.8,\n      show.legend = FALSE\n    ),\n    # Add vertical semi-circle curved lines on the lantern body\n    geom_curve(\n      aes(x = offset_x - 0.5, y = offset_y + 0.5, xend = offset_x - 0.5, yend = offset_y - 0.5),\n      curvature = 0.5, color = \"yellow\", linewidth = 1, alpha = 0.8\n    ),\n    geom_curve(\n      aes(x = offset_x - 0.2, y = offset_y + 0.5, xend = offset_x - 0.2, yend = offset_y - 0.5),\n      curvature = 0.5, color = \"yellow\", linewidth = 1, alpha = 0.8\n    ),\n    geom_curve(\n      aes(x = offset_x, y = offset_y + 0.5, xend = offset_x, yend = offset_y - 0.5),\n      curvature = 0, color = \"yellow\", linewidth = 1, alpha = 0.8\n    ),\n    geom_curve(\n      aes(x = offset_x + 0.2, y = offset_y + 0.5, xend = offset_x + 0.2, yend = offset_y - 0.5),\n      curvature = -0.5, color = \"yellow\", linewidth = 1, alpha = 0.8\n    ),\n    geom_curve(\n      aes(x = offset_x + 0.5, y = offset_y + 0.5, xend = offset_x + 0.5, yend = offset_y - 0.5),\n      curvature = -0.5, color = \"yellow\", linewidth = 1, alpha = 0.8\n    ),\n    # Dots along the lantern body\n    geom_point(\n      data = dots %>% mutate(x = x + offset_x, y = y + offset_y),\n      aes(x = x, y = y),\n      color = \"gold\", size = 4, alpha = 0.8\n    )\n  )\n}\n```\n:::\n\n\n\n### Step 3: Combine all lanterns into a single plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlanterns_plot <- ggplot() +\n  # Add eight lanterns with different offsets\n  create_lantern_layers(-1.5, 1) +\n  create_lantern_layers(1.5, 1) +\n  create_lantern_layers(-1.5, -1) +\n  create_lantern_layers(1.5, -1) +\n  create_lantern_layers(-1.5, -3) +\n  create_lantern_layers(1.5, -3) +\n  create_lantern_layers(-1.5, -5) +\n  create_lantern_layers(1.5, -5) +\n  # Fixed axis and black background\n  coord_fixed() +\n  theme_void() +\n  theme(panel.background = element_rect(fill = \"black\")) +\n  # Add the \"Happy Chinese New Year!\" message at the top\n  annotate(\"text\", x = 0, y = 2.5, label = \"Happy Chinese New Year 2025!!!\", size = 14, color = \"gold\", fontface = \"bold\", hjust = 0.5)\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}